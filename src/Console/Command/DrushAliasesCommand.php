<?php

/**
 * @file
 * Main file for `drush:aliases` command.
 */

namespace ChapterThree\LocalDev\Console\Command;

use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Yaml\Parser;

/**
 * Class for `ldev` command.
 */
class DrushAliasesCommand extends BaseCommand {

  const HEAD = <<<'EOD'
<?php

/**
 * @file
 * Aliases generated by ldev drush:aliases.
 */

EOD;

  /**
   * {@inheritdoc}
   */
  protected function configure() {

    parent::configure();
    $this
      ->setName('drush:aliases')
      ->setDescription('Generate Drush aliases for any currently running sites.');

  }

  /**
   * {@inheritdoc}
   */
  protected function execute(InputInterface $input, OutputInterface $output) {
    parent::execute($input, $output);

    $hostname = 'localhost';
    $this->getRemote($input);
    if ($input->getOption('vagrant')) {
      $hostname = 'local.dev';
    }
    elseif ($this->sshConfig) {
      $hostname = $this->sshConfig['HostName'];
    }
    $ssh_options = '';
    foreach ($this->sshConfig as $key => $val) {
      if (!in_array($key, ['HostName', 'User', 'Port', 'IdentityFile'])) {
        $ssh_options .= " -o '$key $val'";
      }
    }

    // Each alias keyed on name.
    $aliases = [];

    // Parse `docker ps` output.
    list($ps,,) = $this->exec($input, $output,
      "docker ps --format='{{.Names}}  {{.Ports}}'");
    $ps = trim($ps);
    if (!empty($ps)) {
      // Each container.
      foreach (explode("\n", $ps) as $line) {

        // Parse.
        list($machine, $ports) = preg_split('/\\s+/', $line, 2);
        list($build, $container, $index) = explode('_', $machine);
        if ($index > 1) {
          $build .= '.' . $index;
        }

        // Find needed ports.
        $values = [];
        foreach (explode(', ', $ports) as $port) {
          // 0.0.0.0:32776->22/tcp'.
          if (strpos($port, '->') === FALSE) {
            continue;
          }
          list($public, $private) = explode('->', $port);
          switch ($private) {

            // SSH.
            case '22/tcp':
              $values['ssh'] = explode(':', $public)[1];
              break;

            // HTTP.
            case '80/tcp':
              $values['http'] = explode(':', $public)[1];
              break;

            // HTTPS.
            case '443/tcp':
              $values['https'] = explode(':', $public)[1];
              break;

            // MYSQL.
            case '3306/tcp':
              $values['mysql'] = explode(':', $public)[1];
              break;

          }
        }

        // Merge.
        if (isset($aliases[$build])) {
          $aliases[$build] += $values;
        }
        else {
          // Parse docker-compose config.
          $dir = $this->getRootDirectory($input) .
            '/provision/docker/compose/' .
            $build;
          list($compose,,) = $this->exec($input, $output,
            "cat {$dir}/docker-compose.yml");
          $yaml = new Parser();
          $values['docker-compose'] = $yaml->parse($compose);
          $aliases[$build] = $values;
        }

      }
    }

    $output->writeln(self::HEAD);

    $export_alias = function($key, $alias) {
      return '$aliases[\'' . $key . '\'] = ' .
        var_export($alias, TRUE) . ";\n";
    };

    foreach ($aliases as $key => $values) {

      if (empty($values['mysql']) ||
          empty($values['ssh'])
      ) {
        continue;
      }

      $db_url = 'mysql://root:' .
        $values['docker-compose']['mysql']['environment']['MYSQL_ROOT_PASSWORD'] .
        '@' . $hostname . ':' . $values['mysql'] . '/drupal';
      $alias = [
        'db-url' => $db_url,
        'remote-host' => $hostname,
        'remote-user' => 'root',
        'ssh-options' => "-A -p " . $values['ssh'] . $ssh_options,
        'root' => '/var/www',
        'path-aliases' => [
          '%drush-script' => 'drush-remote',
        ],
      ];

      if (isset($values['http'])) {
        $alias['uri'] = 'http://' . $hostname . ':' . $values['http'];
        $output->writeln($export_alias($key, $alias));
      }
      if (isset($values['https'])) {
        $alias['uri'] = 'https://' . $hostname . ':' . $values['https'];
        $output->writeln($export_alias($key . '.ssl', $alias));
      }

    }

  }

}
